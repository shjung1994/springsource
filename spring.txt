서버단 작성
1. spring framework: 웹 개발할 때 주로 사용 / 설정 작업이 많음...
2. spring boot: spring framework 간편화 버전

프로젝트 생성
1. 빌드 툴 설정 ctrl+shift+p => spring initializer
build: 프로젝트생성, 라이브러리 설정, 코드작업, 컴파일, 테스트, 패키지작성, 배포
    1) gradel: TXT기반, 후발주자(maven 개선)
    2) maven: XML기반, html-like(태그 만들어 씀)
2. spring boot version 선택: 3.4.4
3. 언어선택(java, kotlin, groovy)
4. 패키지명: com.example.demo(자유롭게 지정 가능)
5. 패키징타입: jar(java 압축파일), war(java web 압축파일)
6. 자바버전선택: 부트버전에 따라 선택이 달라질 수 있음
7. 필요 라이브러리 선택:
    spring web, dev tools, thymeleaf, lombok

화면(front) 단 작성: html + css + javascript + java
    1) jsp 활용: *.jsp
        html 코드 + java 코드 동시 작성 가능
        spring boot 에서 사용하기 위해서는 설정 작업 필요
    2) 템플릿 엔진 활용: *.html
        thymeleaf, mustache, groovy, freemaker, velocity

스프링 주요 개념
1) IoC(Inversion of Control, 제어의 역전): 메소드나 객체의 호출 작업을 개발자가 결정하는 것이 아니라 외부(spring container)에서 결정

    class A {}
    class B {
        A obj = new A();
    }

    컨테이너는 어느 객체를 생성할 것인지 알아야 함 => 어노테이션으로 알려주기
    - 컨테이너가 생성한 객체: bean
    - 싱글톤 방식(객체는 하나만 생성)으로 객체 생성
    - @Controller, @Service, @Component

2) 경로 임의로 생성
http://localhost:8080/ ==> Controller 파일의 메소드와 매핑

uri 설계
ex) 게시판 개발
게시글 작성: /board/create/
게시글 목록: /board/list
게시글 조회: /board/read
게시글 수정: /board/update

@RequestMapping("/board")
public class BoardController {

@GetMapping("/create")
public String method() {
    return "info";
}

// 또는 void 사용하고 return 없애기
@GetMapping("/update")
public void method() {
}

http://localhost:8080/board/create 브라우저 요청 => 컨트롤러 응답(사실 바로 컨트롤러로 들어오는 것은 아님) => templates 찾기(templates / return 값 찾기)
=> templates / info.html 작성
http://localhost:8080/board/update 브라우저 요청 => 컨트롤러 응답(사실 바로 컨트롤러로 들어오는 것은 아님) => templates 찾기(templates / board/update의 경로 이용)
=> templates / board/update.html 작성

3) 내장 서버: Tomcat(설치 후 사용 - 스프링부트를 사용한다면 내장되어 있음)

http://localhost:8080/: Tomcat 서버 구동 시 기본경로

브라우저를 통해 http, https 프로토콜에 응답하는 서버: SW 웹서버(Apache, NginX)
하지만, 자바해석을 해야하기에 일반웹서버는 사용불가...따라서 WAS(와쓰, Web Application Server: 웹서버+ 자바해석)를 사용
Tomcat = WAS, 무료

4) 오류 발생
    404: 컨트롤러 경로 확인
    405: 컨트롤러 경로+매핑방식 확인
    500: 서버 확인
    400: bad request(int, string 확인)

5) 사용자 입력값 가져오기
    (1) 변수 이용: 타입 지정 가능, 변수명은 form 요소의 이름과 일치
    (2) 커맨드() 객체 이용: 타입 지정 가능, 변수명은 form 요소의 이름과 일치
                            커맨드 객체 사용시 장점은 template 페이지까지 입력값이 유지됨
    (3) HttpServletRequest 이용

    ex
    (1) <input type="password" name="password" id="password" th:value="${}"> 여기서 th:value
    (2) model.addAttribute("result", result);
        model.addAttribute("num1", num1);
        model.addAttribute("num2", num2);
        <div id="result" th:text="${result}"></div>
        <div id="num1" th:text="${num1}"></div>
        <div id="num2" th:text="${num2}"></div>
    (3) public void postLogin(HttpServletRequest request)
        
        String userid = request.getParameter("userid");
        String password = request.getParameter("password");
        String remote = request.getRemoteAddr();
        String local = request.getLocalAddr();

6) @ModelAttribute
    - 별칭
    - model.addAttribute("num1", num1) == @ModelAttribute("num1"): template 페이지에서 값을 유지하고 싶다면

7) RedirectAttributes: 컨트롤러에서 움직이는 방식이 redirect일 때 사용 / 움직이면서 특정 값을 가지고 가고 싶을 때 사용
                       rttr.addAttribute("userid","123"); // userid=123 => 템플릿 ${param.userid}
                       rttr.addFlashAttribute("userid","123"); // ;jsessionid=AB4BD021D6D969A8A0E08B11A0E6C5D4
                                                               // session 객체에 담는 것과 같은 방식 => 템플릿 ${password}

방식
(1) templates 방식, templates 폴더 밑에 해당 페이지가 다 있어야 한다.
(2) redirect 방식, 컨트롤러내에 다른 주소 경로 지정

8) 데이터 유지하기
    - login.html 입력값 ==> 컨트롤러 ==> logout.html 입력값 유지를 하고 싶다면?
        forward 이동방식: @ModelAttribute, Model, 커맨드 객체 / 어느 페이지(templates)로 이동을 하던지 간에 name을 유지시키고 싶다면
        redirect 이동방식: RedirectAttributes 이용
    - login.html 입력값 ==> 컨트롤러 ==> 모든 페이지에서 입력값 유지 하고 싶다면?
        세션: 값을 서버 쪽에 저장함(객체 형태로 담는 것 가능)
              HttpSession을 이용해서 저장 => 필요없는 경우 제거 or 현재 세션이 유지되고 있는 브라우저를 닫으면 종료됨
        쿠키: 값을 클라이언트 브라우저로 전송 후 저장
    - login.html 입력값 ==> 컨트롤러 ==> 다른 페이지에서 입력값 소멸? 변수로 
        컨트롤러에서 변수로 받아내는 경우, 무조건 다른 페이지에서 입력값 소멸

9) 