서버단 작성
1. spring framework: 웹 개발할 때 주로 사용 / 설정 작업이 많음...
2. spring boot: spring framework 간편화 버전

프로젝트 생성
1. 빌드 툴 설정 ctrl+shift+p => spring initializer
build: 프로젝트생성, 라이브러리 설정, 코드작업, 컴파일, 테스트, 패키지작성, 배포
    1) gradel: TXT기반, 후발주자(maven 개선)
    2) maven: XML기반, html-like(태그 만들어 씀)
2. spring boot version 선택: 3.4.4
3. 언어선택(java, kotlin, groovy)
4. 패키지명: com.example.demo(자유롭게 지정 가능)
5. 패키징타입: jar(java 압축파일), war(java web 압축파일)
6. 자바버전선택: 부트버전에 따라 선택이 달라질 수 있음
7. 필요 라이브러리 선택:
    spring web, dev tools, thymeleaf, lombok

화면(front) 단 작성: html + css + javascript + java
    1) jsp 활용: *.jsp
        html 코드 + java 코드 동시 작성 가능
        spring boot 에서 사용하기 위해서는 설정 작업 필요
    2) 템플릿 엔진 활용: *.html
        thymeleaf, mustache, groovy, freemaker, velocity

스프링 주요 개념
1) IoC(Inversion of Control, 제어의 역전): 메소드나 객체의 호출 작업을 개발자가 결정하는 것이 아니라 외부(spring container)에서 결정

    class A {}
    class B {
        A obj = new A();
    }

    컨테이너는 어느 객체를 생성할 것인지 알아야 함 => 어노테이션으로 알려주기
    - 컨테이너가 생성한 객체: bean
    - 싱글톤 방식(객체는 하나만 생성)으로 객체 생성
    - @Controller, @Service, @Component

2) 경로 임의로 생성
http://localhost:8080/ ==> Controller 파일의 메소드와 매핑

uri 설계
ex) 게시판 개발
게시글 작성: /board/create/
게시글 목록: /board/list
게시글 조회: /board/read
게시글 수정: /board/update

@RequestMapping("/board")
public class BoardController {

@GetMapping("/create")
public String method() {
    return "info";
}

// 또는 void 사용하고 return 없애기
@GetMapping("/update")
public void method() {
}
}

http://localhost:8080/board/create 브라우저 요청 => 컨트롤러 응답(사실 바로 컨트롤러로 들어오는 것은 아님) => templates 찾기(templates / return 값 찾기)
=> templates / info.html 작성
http://localhost:8080/board/update 브라우저 요청 => 컨트롤러 응답(사실 바로 컨트롤러로 들어오는 것은 아님) => templates 찾기(templates / board/update의 경로 이용)
=> templates / board/update.html 작성

